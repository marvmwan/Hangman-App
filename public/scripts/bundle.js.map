{"version":3,"file":"bundle.js","mappings":"6LAAMA,EAAAA,WACF,WAAYC,EAAKC,I,4FAAY,SACzBC,KAAKF,KAAOA,EAAKG,cAAcC,MAAM,IACrCF,KAAKD,WAAaA,EAClBC,KAAKG,eAAiB,GACtBH,KAAKI,OAAS,U,8CAElB,SAAUC,GACNA,EAAgBA,EAAcJ,cAE9B,IAAMK,GAAYN,KAAKG,eAAeI,SAASF,GACzCG,GAAcR,KAAKF,KAAKS,SAASF,GAEnCC,IACAN,KAAKG,eAAeM,KAAKJ,GACrBG,GACAR,KAAKD,cAIbW,KAAKC,gB,kBAET,WAAa,WACLC,EAAS,GAYb,OAVAZ,KAAKF,KAAKe,SAAQ,SAACC,GACf,EAAKX,eAAeI,SAASO,GAC7BF,GAAUE,EAEVF,GADkB,MAAXE,EACG,IAEA,OAIPF,I,yBAEX,WACI,IAAMA,EAASZ,KAAKY,OAChBZ,KAAKD,WAAa,GAAKa,EAAOL,SAAS,KACvCP,KAAKI,OAAS,UACPJ,KAAKD,YAAc,IAAMa,EAAOL,SAAS,KAChDP,KAAKI,OAAS,WAEdJ,KAAKI,OAAS,W,yBAGtB,WACI,MAAoB,YAAhBJ,KAAKI,OACL,wBAAwBJ,KAAKD,YACN,aAAhBC,KAAKI,OACL,oCACiB,WAAjBJ,KAAMI,OACb,kCAAkCJ,KAAKF,KAAKiB,KAAK,IAAjD,WADG,O,mBApDTlB,G,yHCAN,IAAMmB,EAAa,e,EAAA,G,EAAA,yBAAG,WAAOC,GAAP,wGACKC,MAAM,0CAAD,OAA2CD,IADrD,UAEM,OADlBE,EADY,QAELf,OAFK,iCAGKe,EAASC,OAHd,cAGRC,EAHQ,yBAIPA,EAAKT,QAJE,cAMR,IAAIU,MAAM,sCANF,2C,+KAAH,sD,yHCGnB,IAAMC,EAAS,WACXC,EAASC,UAAYf,EAAKE,OAC1Bc,EAAaD,UAAYf,EAAKiB,eAG5BC,EAAS,e,EAAA,G,EAAA,yBAAG,mHACOZ,EAAc,GADrB,OACRJ,EADQ,OAEdF,EAAO,IAAIb,EAAQe,EAAQiB,KAAKC,MAAMlB,EAAOmB,OAAO,IACpDR,IAHc,0C,+KAAH,qDAMfS,OAAOC,iBAAiB,YAAY,SAAUC,GACtB,YAAhBxB,EAAKN,SAGTM,EAAKyB,UAAUD,EAAEE,KACjBb,QAGJc,SAASC,cAAc,cAAcL,iBAAiB,QAASL,GAE/D,IAEIlB,EAFEc,EAAWa,SAASC,cAAc,WAClCZ,EAAeW,SAASC,cAAc,iBAG5CV,K","sources":["webpack://boilerplate/./src/hangman.js","webpack://boilerplate/./src/requests.js","webpack://boilerplate/./src/index.js"],"sourcesContent":["class Hangman {\n    constructor(word,numGuesses) {\n        this.word = word.toLowerCase().split(''),\n        this.numGuesses = numGuesses,\n        this.guessedLetters = [],\n        this.status = 'playing'  \n    }\n    makeGuess(guessedLetter){\n        guessedLetter = guessedLetter.toLowerCase()\n\n        const isUnique = !this.guessedLetters.includes(guessedLetter)\n        const isBadGuess = !this.word.includes(guessedLetter)\n\n        if (isUnique){\n            this.guessedLetters.push(guessedLetter)\n            if (isBadGuess){\n                this.numGuesses --\n            }\n        }\n    \n        game.checkStatus()\n    }\n    get puzzle() {\n        let puzzle = ''\n\n        this.word.forEach((letter) => {\n        if (this.guessedLetters.includes(letter)){\n            puzzle += letter\n        } else if (letter === ' ') {\n            puzzle += ' '\n        } else {\n            puzzle += 'x'\n        }\n        })\n\n        return puzzle\n    }\n    checkStatus(){\n        const puzzle = this.puzzle\n        if (this.numGuesses > 0 && puzzle.includes('x')){\n            this.status = 'playing'\n        } else if (this.numGuesses >= 0 && !puzzle.includes('x')){\n            this.status = 'finished'\n        } else {\n            this.status = 'failed'\n        }    \n    }\n    get statusMessage(){\n        if (this.status === 'playing'){\n            return `Guesses left: ${this.numGuesses}`\n        } else if (this.status === 'finished'){\n            return 'Great Work! You guessed the word.'\n        } else if (this. status === 'failed'){\n            return `Nice try! The word was \"${this.word.join('')}\".`\n        }    \n    }\n}\nexport {Hangman as default}","const getPuzzleData = async (wordCount) => {\n    const response = await fetch(`http://puzzle.mead.io/puzzle?wordCount=${wordCount}`)\n    if (response.status === 200) {\n        const data = await response.json()\n        return data.puzzle \n    } else {\n        throw new Error('Fetching was not done successfully')\n    }\n}\nexport {getPuzzleData as default}\n\n// const getCountryData = async (countryCode) => {\n//     const response = await fetch('http://restcountries.eu/rest/v2/all')\n\n//     if (response.status === 200) {\n//         const data = await response.json()\n//         return data.find((country) => country.alpha2Code === countryCode)\n//     } else {\n//         throw new Error('Data was unable to be fetched successfully')\n//     }\n// }\n\n// const getLocation = async () => {\n//     const response = await fetch('http://ipinfo.io/json?token=e49e2baa6bbcd7')\n\n//     if (response.status === 200) {\n//         return response.json()\n//     } else {\n//         throw new Error('Location was unable to be fetched successfully')\n//     }\n// }\n\n// const getCurrentCountry = async () => {\n//     const location = await getLocation()\n//     const country = await getCountryData(location.country)\n\n//     return country\n// }\n\n// Old way using promises\n// ------------------------------\n\n\n// function getCountryName(countryCode){\n//     return fetch('http://restcountries.eu/rest/v2/all', {}).then((response) => {\n//         if (response.status === 200) {\n//             return response.json()\n//         } else {\n//             throw new Error('The data was unable to be fetched')\n//         }\n//     }).then((countriesData) => {\n//         const country = countriesData.find((country) => country.alpha2Code === countryCode)\n//         return country\n//     })\n// }\n\n// function getPuzzleData(wordCount){\n//     return fetch(`http://puzzle.mead.io/puzzle?wordCount=${wordCount}`, {}).then((response) => {\n//         if (response.status === 200){\n//             return response.json()\n//         } else {\n//             throw new Error('The puzzle was unable to be fetched')\n//         }\n//     }).then((data) => {\n//         return data.puzzle\n//     })\n// }\n\n// function getLocation() {\n//     return fetch('http://ipinfo.io/json?token=e49e2baa6bbcd7').then((response) => {\n//         if (response.status === 200) {\n//             return response.json()\n//         } else {\n//             throw new Error('Location was not able to be fetched')\n//         }\n//     })\n// }\n\n","import Hangman from './hangman'\nimport getPuzzleData from './requests'\n\nconst render = () => {\n    puzzleEl.innerHTML = game.puzzle\n    numGuessesEl.innerHTML = game.statusMessage\n}\n\nconst startGame = async () => {\n    const puzzle = await getPuzzleData(2)\n    game = new Hangman(puzzle, Math.floor(puzzle.length/2))\n    render()\n}\n\nwindow.addEventListener('keypress', function (e){\n    if (game.status !== 'playing'){\n        return\n    }\n    game.makeGuess(e.key)\n    render()\n})\n\ndocument.querySelector('#reset-btn').addEventListener('click', startGame)\n\nconst puzzleEl = document.querySelector('#puzzle')\nconst numGuessesEl = document.querySelector('#guesses-left')\nlet game\n\nstartGame()"],"names":["Hangman","word","numGuesses","this","toLowerCase","split","guessedLetters","status","guessedLetter","isUnique","includes","isBadGuess","push","game","checkStatus","puzzle","forEach","letter","join","getPuzzleData","wordCount","fetch","response","json","data","Error","render","puzzleEl","innerHTML","numGuessesEl","statusMessage","startGame","Math","floor","length","window","addEventListener","e","makeGuess","key","document","querySelector"],"sourceRoot":""}